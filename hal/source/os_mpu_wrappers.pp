





























































 

 
 





































































 




 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


#pragma diag_push
#pragma CHECK_MISRA("-19.7")  
#pragma CHECK_MISRA("-20.1")  
#pragma CHECK_MISRA("-20.2")  



typedef int ptrdiff_t;

typedef unsigned size_t;


typedef unsigned short wchar_t;


#pragma diag_push
#pragma CHECK_MISRA("-19.10")  



#pragma diag_pop



#pragma diag_push
#pragma CHECK_MISRA("-19.15")  

 
 
 
 
 
 
 

#pragma diag_pop













 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

    typedef   signed char   int8_t;
    typedef unsigned char  uint8_t;
    typedef          short  int16_t;
    typedef unsigned short uint16_t;
    typedef          int    int32_t;
    typedef unsigned int   uint32_t;


    typedef          long long  int64_t;
    typedef unsigned long long uint64_t;

 

    typedef  int8_t   int_least8_t;
    typedef uint8_t  uint_least8_t;

    typedef  int16_t  int_least16_t;
    typedef uint16_t uint_least16_t;
    typedef  int32_t  int_least32_t;
    typedef uint32_t uint_least32_t;


    typedef  int64_t  int_least64_t;
    typedef uint64_t uint_least64_t;

 

    typedef  int32_t  int_fast8_t;
    typedef uint32_t uint_fast8_t;
    typedef  int32_t  int_fast16_t;
    typedef uint32_t uint_fast16_t;

    typedef  int32_t  int_fast32_t;
    typedef uint32_t uint_fast32_t;


    typedef  int64_t  int_fast64_t;
    typedef uint64_t uint_fast64_t;

 
    typedef          int intptr_t;
    typedef unsigned int uintptr_t;

 
    typedef          long long intmax_t;
    typedef unsigned long long uintmax_t;





 

 
















 







 







 




 





 








































































 













 



 

 

 

 

 


 


 



































































 





 
typedef void (*TaskFunction_t)( void * );

 



 

 






 



































































 



 


 



































































 










 

 

typedef uint32_t StackType_t;
typedef long BaseType_t;
typedef unsigned long UBaseType_t;

    typedef uint32_t TickType_t;

	
 


 

 
#pragma SWI_ALIAS(vPortEnterCritical, 2)
extern void vPortEnterCritical( void );

#pragma SWI_ALIAS(vPortExitCritical, 3)
extern void vPortExitCritical( void );

#pragma SWI_ALIAS(vPortDisableInterrupts, 5)
extern void vPortDisableInterrupts( void );


#pragma SWI_ALIAS(vPortEnableInterrupts, 6)
extern void vPortEnableInterrupts( void );


 
#pragma SWI_ALIAS(vPortYield, 0)
extern void vPortYield( void );




 
#pragma SWI_ALIAS(vPortTaskUsesFPU, 4)
extern void vPortTaskUsesFPU(void);

 

	 
	unsigned long ulPortCountLeadingZeros( unsigned long ulBitmap );

	 

	 

	 




 


 







 

 

 



typedef struct MPU_REGION_REGISTERS
{
	unsigned ulRegionBaseAddress;
	unsigned ulRegionSize;
	unsigned ulRegionAttribute;
} xMPU_REGION_REGISTERS;


 
typedef struct MPU_SETTINGS
{
	xMPU_REGION_REGISTERS xRegion[ ( ( ( ( ( 12UL ) - 2 ) - ( 6UL - 1UL ) ) + 1 ) + 1 ) ];
} xMPU_SETTINGS;







 











































































 



 

	

 

         











 
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) __attribute__ ((section(".kernelTEXT")));

 
typedef struct HeapRegion
{
	uint8_t *pucStartAddress;
	size_t xSizeInBytes;
} HeapRegion_t;











 
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions );




 
void *pvPortMalloc( size_t xSize ) __attribute__ ((section(".kernelTEXT")));
void vPortFree( void *pv ) __attribute__ ((section(".kernelTEXT")));
void vPortInitialiseBlocks( void ) __attribute__ ((section(".kernelTEXT")));
size_t xPortGetFreeHeapSize( void ) __attribute__ ((section(".kernelTEXT")));
size_t xPortGetMinimumEverFreeHeapSize( void ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xPortStartScheduler( void ) __attribute__ ((section(".kernelTEXT")));





 
void vPortEndScheduler( void ) __attribute__ ((section(".kernelTEXT")));







 
	struct xMEMORY_REGION;
	void vPortStoreTaskMPUSettings( xMPU_SETTINGS *xMPUSettings, const struct xMEMORY_REGION * const xRegions, StackType_t *pxBottomOfStack, uint16_t usStackDepth ) __attribute__ ((section(".kernelTEXT")));








 





































 












 
	
 

	
 

	
 

	
 

	 

	 

	
 

	



 

	


 

	


 

	


 


 



















































































	
 


 


	
 






































































 







































































 



























 






























 






 
	 




 
struct xLIST_ITEM
{
					 
	 TickType_t xItemValue;			 
	struct xLIST_ITEM *  pxNext;		 
	struct xLIST_ITEM *  pxPrevious;	 
	void * pvOwner;										 
	void *  pvContainer;				 
					 
};
typedef struct xLIST_ITEM ListItem_t;					 

struct xMINI_LIST_ITEM
{
					 
	 TickType_t xItemValue;
	struct xLIST_ITEM *  pxNext;
	struct xLIST_ITEM *  pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;



 
typedef struct xLIST
{
					 
	 UBaseType_t uxNumberOfItems;
	ListItem_t *  pxIndex;		 
	MiniListItem_t xListEnd;						 
					 
} List_t;







 







 







 








 







 






 






 






 







 



 




















 

















 









 






 





 










 
void vListInitialise( List_t * const pxList );









 
void vListInitialiseItem( ListItem_t * const pxItem );











 
void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem );



















 
void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem );













 
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove );







 











 
typedef void * TaskHandle_t;




 
typedef BaseType_t (*TaskHookFunction_t)( void * );

 
typedef enum
{
	eRunning = 0,	 
	eReady,			 
	eBlocked,		 
	eSuspended,		 
	eDeleted		 
} eTaskState;

 
typedef enum
{
	eNoAction = 0,				 
	eSetBits,					 
	eIncrement,					 
	eSetValueWithOverwrite,		 
	eSetValueWithoutOverwrite	 
} eNotifyAction;



 
typedef struct xTIME_OUT
{
	BaseType_t xOverflowCount;
	TickType_t xTimeOnEntering;
} TimeOut_t;



 
typedef struct xMEMORY_REGION
{
	void *pvBaseAddress;
	uint32_t ulLengthInBytes;
	uint32_t ulParameters;
} MemoryRegion_t;



 
typedef struct xTASK_PARAMETERS
{
	TaskFunction_t pvTaskCode;
	const char * const pcName;	 
	uint16_t usStackDepth;
	void *pvParameters;
	UBaseType_t uxPriority;
	StackType_t *puxStackBuffer;
	MemoryRegion_t xRegions[ ( ( ( ( 12UL ) - 2 ) - ( 6UL - 1UL ) ) + 1 ) ];
} TaskParameters_t;


 
typedef struct xTASK_STATUS
{
	TaskHandle_t xHandle;			 
	const char *pcTaskName;			   
	UBaseType_t xTaskNumber;		 
	eTaskState eCurrentState;		 
	UBaseType_t uxCurrentPriority;	 
	UBaseType_t uxBasePriority;		 
	uint32_t ulRunTimeCounter;		 
	uint16_t usStackHighWaterMark;	 
} TaskStatus_t;

 
typedef enum
{
	eAbortSleep = 0,		 
	eStandardSleep,			 
	eNoTasksWaitingTimeout	 
} eSleepModeStatus;






 








 












 












 








 








 



 




 
















































































 



































































 














































 
void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) __attribute__ ((section(".kernelTEXT")));







































 
void vTaskDelete( TaskHandle_t xTaskToDelete ) __attribute__ ((section(".kernelTEXT")));



 














































 
void vTaskDelay( const TickType_t xTicksToDelay ) __attribute__ ((section(".kernelTEXT")));

























































 
void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) __attribute__ ((section(".kernelTEXT")));













































 
UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) __attribute__ ((section(".kernelTEXT")));






 
UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) __attribute__ ((section(".kernelTEXT")));
















 
eTaskState eTaskGetState( TaskHandle_t xTask ) __attribute__ ((section(".kernelTEXT")));








































 
void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) __attribute__ ((section(".kernelTEXT")));

















































 
void vTaskSuspend( TaskHandle_t xTaskToSuspend ) __attribute__ ((section(".kernelTEXT")));















































 
void vTaskResume( TaskHandle_t xTaskToResume ) __attribute__ ((section(".kernelTEXT")));



























 
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) __attribute__ ((section(".kernelTEXT")));



 



























 
void vTaskStartScheduler( void ) __attribute__ ((section(".kernelTEXT")));






















































 
void vTaskEndScheduler( void ) __attribute__ ((section(".kernelTEXT")));

















































 
void vTaskSuspendAll( void ) __attribute__ ((section(".kernelTEXT")));




















































 
BaseType_t xTaskResumeAll( void ) __attribute__ ((section(".kernelTEXT")));



 









 
TickType_t xTaskGetTickCount( void ) __attribute__ ((section(".kernelTEXT")));














 
TickType_t xTaskGetTickCountFromISR( void ) __attribute__ ((section(".kernelTEXT")));












 
UBaseType_t uxTaskGetNumberOfTasks( void ) __attribute__ ((section(".kernelTEXT")));












 
char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) __attribute__ ((section(".kernelTEXT")));  



















 
UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) __attribute__ ((section(".kernelTEXT")));






 











 
BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) __attribute__ ((section(".kernelTEXT")));







 
TaskHandle_t xTaskGetIdleTaskHandle( void );

































































































 
UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime );













































 
void vTaskList( char * pcWriteBuffer ) __attribute__ ((section(".kernelTEXT")));  




















































 
void vTaskGetRunTimeStats( char *pcWriteBuffer ) __attribute__ ((section(".kernelTEXT")));  











































































 
BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );























































































 
BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );









































































 
BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );












































 





















































 
void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken );



































































 
uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );



 















 
BaseType_t xTaskIncrementTick( void ) __attribute__ ((section(".kernelTEXT")));































 
void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) __attribute__ ((section(".kernelTEXT")));
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) __attribute__ ((section(".kernelTEXT")));











 
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait ) __attribute__ ((section(".kernelTEXT")));
























 
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) __attribute__ ((section(".kernelTEXT")));
BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) __attribute__ ((section(".kernelTEXT")));








 
void vTaskSwitchContext( void ) __attribute__ ((section(".kernelTEXT")));




 
TickType_t uxTaskResetEventItemValue( void ) __attribute__ ((section(".kernelTEXT")));



 
TaskHandle_t xTaskGetCurrentTaskHandle( void ) __attribute__ ((section(".kernelTEXT")));



 
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) __attribute__ ((section(".kernelTEXT")));




 
void vTaskMissedYield( void ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xTaskGetSchedulerState( void ) __attribute__ ((section(".kernelTEXT")));




 
void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) __attribute__ ((section(".kernelTEXT")));  



 
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) __attribute__ ((section(".kernelTEXT")));




 
void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) __attribute__ ((section(".kernelTEXT")));








 
void vTaskStepTick( const TickType_t xTicksToJump ) __attribute__ ((section(".kernelTEXT")));














 
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) __attribute__ ((section(".kernelTEXT")));




 
void *pvTaskIncrementMutexHeldCount( void );







































































 










 
typedef void * QueueHandle_t;





 
typedef void * QueueSetHandle_t;





 
typedef void * QueueSetMemberHandle_t;

 

 
























































 
















































































 
















































































 


















































































 

















































































 






















































































 
BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition ) __attribute__ ((section(".kernelTEXT")));






























































































 































 
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue, void * const pvBuffer ) __attribute__ ((section(".kernelTEXT")));



























































































 

































































































 
BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeek ) __attribute__ ((section(".kernelTEXT")));













 
UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));















 
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));












 
void vQueueDelete( QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));




































































 





































































 





















































































 








































































 













































































 
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition ) __attribute__ ((section(".kernelTEXT")));
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken ) __attribute__ ((section(".kernelTEXT")));























































































 
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));















 
BaseType_t xQueueAltGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, BaseType_t xCopyPosition );
BaseType_t xQueueAltGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, BaseType_t xJustPeeking );









 
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait );





 
QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType ) __attribute__ ((section(".kernelTEXT")));
QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount ) __attribute__ ((section(".kernelTEXT")));
void* xQueueGetMutexHolder( QueueHandle_t xSemaphore ) __attribute__ ((section(".kernelTEXT")));




 
BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait ) __attribute__ ((section(".kernelTEXT")));
BaseType_t xQueueGiveMutexRecursive( QueueHandle_t pxMutex ) __attribute__ ((section(".kernelTEXT")));






 






















 










 




 
QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType ) __attribute__ ((section(".kernelTEXT")));
















































 
QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength ) __attribute__ ((section(".kernelTEXT")));






















 
BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) __attribute__ ((section(".kernelTEXT")));

















 
BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) __attribute__ ((section(".kernelTEXT")));


































 
QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait ) __attribute__ ((section(".kernelTEXT")));



 
QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) __attribute__ ((section(".kernelTEXT")));

 
void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait ) __attribute__ ((section(".kernelTEXT")));
BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue ) __attribute__ ((section(".kernelTEXT")));
void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber ) __attribute__ ((section(".kernelTEXT")));
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) __attribute__ ((section(".kernelTEXT")));






 

 
 


 
#pragma SWI_ALIAS(prvRaisePrivilege, 1);
extern BaseType_t prvRaisePrivilege( void );

 

BaseType_t MPU_xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions )
{
	BaseType_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	xReturn = xTaskGenericCreate( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask, puxStackBuffer, xRegions );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}


 


void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const xRegions )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	vTaskAllocateMPURegions( xTask, xRegions );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
}


 


	void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete )
	{
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		vTaskDelete( pxTaskToDelete );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	}


 

	void MPU_vTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		vTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	}


 

	void MPU_vTaskDelay( const TickType_t xTicksToDelay  )
	{
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		vTaskDelay( xTicksToDelay );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	}


 

	UBaseType_t MPU_uxTaskPriorityGet( TaskHandle_t pxTask )
	{
		UBaseType_t uxReturn;
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		uxReturn = uxTaskPriorityGet( pxTask );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
		return uxReturn;
	}


 

	void MPU_vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		vTaskPrioritySet( xTask, uxNewPriority );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	}


 

	void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend )
	{
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		vTaskSuspend( pxTaskToSuspend );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	}


 

	void MPU_vTaskResume( TaskHandle_t pxTaskToResume )
	{
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		vTaskResume( pxTaskToResume );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	}


 

void MPU_vTaskSuspendAll( void )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	vTaskSuspendAll();
    if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
}


 

BaseType_t MPU_xTaskResumeAll( void )
{
	BaseType_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	xReturn = xTaskResumeAll();
    if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
    return xReturn;
}


 

TickType_t MPU_xTaskGetTickCount( void )
{
	TickType_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	xReturn = xTaskGetTickCount();
    if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}


 

UBaseType_t MPU_uxTaskGetNumberOfTasks( void )
{
	UBaseType_t uxReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	uxReturn = uxTaskGetNumberOfTasks();
    if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return uxReturn;
}


 



 


 



 



 



 

	UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
		UBaseType_t uxReturn;
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		uxReturn = uxTaskGetStackHighWaterMark( xTask );
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
		return uxReturn;
	}


 



 

	BaseType_t MPU_xTaskGetSchedulerState( void )
	{
		BaseType_t xReturn;
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		xReturn = xTaskGetSchedulerState();
        if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
		return xReturn;
	}


 

QueueHandle_t MPU_xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
	QueueHandle_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	xReturn = xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}


 

BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
	BaseType_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}


 

UBaseType_t MPU_uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	UBaseType_t uxReturn;
	uxReturn = uxQueueMessagesWaiting( xQueue );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return uxReturn;
}


 

BaseType_t MPU_xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();
	BaseType_t xReturn;
	xReturn = xQueueGenericReceive( xQueue, pvBuffer, xTicksToWait, xJustPeeking );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}


 

	QueueHandle_t MPU_xQueueCreateMutex( const uint8_t ucQueueType )
	{
		QueueHandle_t xReturn;
		BaseType_t xRunningPrivileged = prvRaisePrivilege();
		xReturn = xQueueCreateMutex( ucQueueType );
		if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
		return xReturn;
	}


 



 



 



 



 



 


 

void MPU_vQueueDelete( QueueHandle_t xQueue )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	vQueueDelete( xQueue );

	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
}

 

BaseType_t MPU_xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
	BaseType_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	xReturn = xQueueGenericReset( xQueue, xNewQueue );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}

 


 


 


 


 

BaseType_t MPU_xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
	BaseType_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	xReturn = xQueuePeekFromISR( xQueue, pvBuffer );
	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
	return xReturn;
}

 


 


 

void *MPU_pvPortMalloc( size_t xSize )
{
	void *pvReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	pvReturn = pvPortMalloc( xSize );

	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };

	return pvReturn;
}


 

void MPU_vPortFree( void *pv )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	vPortFree( pv );

	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
}


 

void MPU_vPortInitialiseBlocks( void )
{
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	vPortInitialiseBlocks();

	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };
}


 

size_t MPU_xPortGetFreeHeapSize( void )
{
	size_t xReturn;
	BaseType_t xRunningPrivileged = prvRaisePrivilege();

	xReturn = xPortGetFreeHeapSize();

	if( xRunningPrivileged == 0 ) { asm( " CPS #0x10"); };

	return xReturn;
}

 
