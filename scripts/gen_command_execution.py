#!/usr/bin/python3


import MessageDefinitions_pb2 as MD

filename = './critical/commandExecution.h'

template = \
'''/* This file is auto-generated by gen_global_state_code.py script, manual changes will be lost */
#ifndef RELAXED_COMMANDEXECUTION_H_
#define RELAXED_COMMANDEXECUTION_H_

#include "MessageDefinitions.pb.h"

#define COMMAND_EXECUTION_TYPES                  \\
{generated_command_execution_types}

// function definitions
#define X(commandType) \
  void commandExecution_##commandType(const CommandRequest * request);
  COMMAND_EXECUTION_TYPES
#undef X

typedef enum {{
{generated_command_response_types}
}} commandResponse_t;

#endif /* RELAXED_COMMANDEXECUTION_H_*/

'''

type_mapping = {
  'TYPE_DOUBLE':      'double',
  'TYPE_FLOAT':       'float',
  'TYPE_INT32':       'int32_t',
  'TYPE_INT64':       'int64_t',
  'TYPE_UINT32':      'uint32_t',
  'TYPE_UINT64':      'uint64_t',
  'TYPE_SINT32':      'int32_t',
  'TYPE_SINT64':      'int64_t',
  'TYPE_FIXED32':     'uint32_t',
  'TYPE_FIXED64':     'uint64_t',
  'TYPE_SFIXED32':    'int32_t',
  'TYPE_SFIXED64':    'int64_t',
  'TYPE_BOOL':        'bool',
  'TYPE_STRING':      'string',
  'TYPE_BYTES':       'string',
# the rest of types like bytes and string generates #error macro
}

type_conversion = {}

commandExecution = MD.CommandRequest()

# build type conversion table for mapping PB type numbers to C type strings
for key, value in type_mapping.items():
  num = getattr(commandExecution.DESCRIPTOR.fields[0], key)
  type_conversion[num] = value

lines = []

#for field in commandExecution.TYPE.DESCRIPTOR.values_by_name:
for field in commandExecution.TYPE.keys():
  line = '\tX({0:<20}) \\'.format(field)
  #print(line)
  lines.append(line)

generated_command_execution_types  = '\n'.join(lines)

commandResponse = MD.CommandResponse()

lines = []
for field in commandResponse.RESULT.keys():
  line = '\t{0},'.format(field)
  #print(line)
  lines.append(line)

generated_command_response_types = '\n'.join(lines)

with open(filename, 'w') as file:
  file.write(template.format(generated_command_response_types=generated_command_response_types, generated_command_execution_types=generated_command_execution_types))
print(' generated', filename)
