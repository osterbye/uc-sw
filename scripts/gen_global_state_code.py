#!/usr/bin/python3

# sample generated code (for illustrative purposes only):
#   #ifndef RELAXED_STATUSUPDATECONFIG_H_
#   #define RELAXED_STATUSUPDATECONFIG_H_
#   
#   #define STATE_UPDATE                  \
#     X(int32_t, timestamp,   0)          \
#     X(float,   voltageLV,   0)          \
#     X(float,   voltageHV,   0)          \
#   
#   #endif /* RELAXED_STATUSUPDATECONFIG_H_ */
#

import MessageDefinitions_pb2 as MD

filename = './relaxed/statusUpdateConfig.h'

template = \
'''/* This file is auto-generated by gen_global_state_code.py script, manual changes will be lost */
#ifndef RELAXED_STATUSUPDATECONFIG_H_
#define RELAXED_STATUSUPDATECONFIG_H_

#define STATUS_UPDATE                  \\
{generated_code}

{comment_section}

#endif /* RELAXED_STATUSUPDATECONFIG_H_*/

'''

type_mapping = {
  'TYPE_DOUBLE':      'double',
  'TYPE_FLOAT':       'float',
  'TYPE_INT32':       'int32_t',
  'TYPE_INT64':       'int64_t',
  'TYPE_UINT32':      'uint32_t',
  'TYPE_UINT64':      'uint64_t',
  'TYPE_SINT32':      'int32_t',
  'TYPE_SINT64':      'int64_t',
  'TYPE_FIXED32':     'uint32_t',
  'TYPE_FIXED64':     'uint64_t',
  'TYPE_SFIXED32':    'int32_t',
  'TYPE_SFIXED64':    'int64_t',
  'TYPE_BOOL':        'bool',
  'TYPE_STRING':      'string',
  'TYPE_BYTES':       'string',
# the rest of types like bytes and string generates #error macro
}

type_conversion = {}

statusUpdate = MD.StatusUpdate()

# build type conversion table for mapping PB type numbers to C type strings
for key, value in type_mapping.items():
  num = getattr(statusUpdate.DESCRIPTOR.fields[0], key)
  type_conversion[num] = value

lines = []
comments = []

for field in statusUpdate.DESCRIPTOR.fields:
  if field.label == field.LABEL_OPTIONAL or field.label == field.LABEL_REQUIRED:
    if field.type in type_conversion:
      type_name = type_conversion[field.type]
    else: # Todo: types other than ENUM?
      type_name = 'StatusUpdate_' + field.enum_type.name
    line = '\tX({0:<10}, {1:<20}, 0) \\'.format(type_name, field.name)
    lines.append(line)
  elif field.label == field.LABEL_REPEATED:
    line = '/* {0} not included because repeated fields need special handling */'.format(field.name)
    comments.append(line)
  else:
    print('Warning: field label {0} handling not implemented'.format(field.label))

generated_code  = '\n'.join(lines)
comment_section = '\n'.join(comments)

with open(filename, 'w') as file:
  file.write(template.format(generated_code=generated_code, comment_section=comment_section))

print(' generated', filename)
