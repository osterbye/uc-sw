#!/usr/bin/python3

import MessageDefinitions_pb2

filename = './relaxed/buildStatusUpdate.c'

template = \
'''/* This file is auto-generated by gen_status_update_code.py script, manual changes will be lost */

#include "nanopb/pb_decode.h"
#include "nanopb/pb_encode.h"
#include "MessageDefinitions.pb.h"
#include "globalState.h"
#include "buildStatusUpdate.h"

void buildStatusUpdate(StatusUpdate * status) {{
{generated_code}

{comment_section}
}}

'''
statusUpdate = MessageDefinitions_pb2.StatusUpdate()

lines = []
comments = []

for field in statusUpdate.DESCRIPTOR.fields:
  if field.label == field.LABEL_OPTIONAL or field.label == field.LABEL_REQUIRED:
    field_options = statusUpdate.DESCRIPTOR.fields_by_name[field.name].GetOptions()
    origin_enum = field_options.Extensions[MessageDefinitions_pb2.source]
    destination_enum = field_options.Extensions[MessageDefinitions_pb2.sink]
    if origin_enum == MessageDefinitions_pb2.UC and destination_enum >= MessageDefinitions_pb2.CM:
      line = '\tstatus->has_{0} = true;\n\tstatus->{0} = Get_{0}();'.format(field.name)
      lines.append(line)
  elif field.label == field.LABEL_REPEATED:
    line = '\t/* {0} not included because repeated fields need special handling */'.format(field.name)
    comments.append(line)
  else:
    print('Warning: field label {0} handling not implemented'.format(field.label))

generated_code = '\n'.join(lines)
comment_section = '\n'.join(comments)

with open(filename, 'w') as file:
  file.write(template.format(generated_code=generated_code, comment_section=comment_section))

print(' generated', filename)
